/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_.buku;

import CONTROLLER_.C_Buku;
import GUI_.loading_box.loading_now;
import MODEL_.M_Buku;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.Normalizer;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;

/**
 *
 * @author frans
 */
public class importBuku extends javax.swing.JFrame {

    /**
     * Creates new form importBuku
     */
    String filePath = "";
    int total=0;
    int lastRow=0;
    public importBuku() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btn_importFile = new javax.swing.JButton();
        label_filePath = new javax.swing.JLabel();
        btn_startImport = new javax.swing.JButton();
        label_countData = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 255, 51));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Import Buku");

        btn_importFile.setText("Browse FIle");
        btn_importFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_importFileMouseClicked(evt);
            }
        });

        btn_startImport.setText("Mulai Import");
        btn_startImport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_startImportMouseClicked(evt);
            }
        });

        label_countData.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N

        jLabel2.setText("FILE EXCEL HARUS BERFORMAT .XLSX");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_startImport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_importFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_filePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(label_countData))
                        .addGap(0, 269, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_importFile)
                    .addComponent(label_filePath))
                .addGap(18, 18, 18)
                .addComponent(label_countData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(btn_startImport)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_importFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_importFileMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        FileFilter filter = new FileNameExtensionFilter("Excel file", "xls", "xlsx");
        chooser.addChoosableFileFilter(filter);
        chooser.setDialogTitle("Pilih File");
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            System.out.println("PROCESSING...");
            filePath = chooser.getSelectedFile().getAbsolutePath();
            label_filePath.setText(filePath);

            try {
                FileInputStream fileStream = new FileInputStream(filePath);
                Workbook workBook = new XSSFWorkbook(fileStream);
                Sheet datatypeSheet = workBook.getSheetAt(0);

                label_countData.setText(datatypeSheet.getPhysicalNumberOfRows() + " DATA LOADED");
                System.out.println("IDLE");

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btn_importFileMouseClicked

    private void btn_startImportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_startImportMouseClicked
       
        try {
            FileInputStream fileStream = new FileInputStream(filePath);
            M_Buku mBuku = new M_Buku();
            Workbook workBook = new XSSFWorkbook(fileStream);
            Sheet datatypeSheet = workBook.getSheetAt(0);
            workBook.setMissingCellPolicy(MissingCellPolicy.RETURN_BLANK_AS_NULL);

            Iterator<Row> rowIterator = datatypeSheet.iterator();
            rowIterator.next(); // skip the header row
            DataFormatter formatter = new DataFormatter();
            
            lastRow=datatypeSheet.getLastRowNum();
            while (rowIterator.hasNext()) {
                Row nextRow = rowIterator.next();
                Iterator<Cell> cellIterator = nextRow.cellIterator();

                if(nextRow==null){
                    System.out.println("SKIP ROW");
                }else{
                    while (cellIterator.hasNext()) {
                    Cell nextCell = cellIterator.next();

                    int columnIndex = nextCell.getColumnIndex();

                    if (columnIndex == 0) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookIsbn = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setBook_isbn(bookIsbn);
                    } else if (columnIndex == 1) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookTitle = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setBook_title(removeSpcialChar(bookTitle));
                    } else if (columnIndex == 2) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookAuthor = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setBook_author(removeSpcialChar(bookAuthor));
                    } else if (columnIndex == 3) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookYear = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setYear_of_pub(Integer.parseInt(bookYear));
                    } else if (columnIndex == 4) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookPub = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setBook_pub(removeSpcialChar(bookPub));
                    } else if (columnIndex == 5) {
                        Cell isi_kolom_skrg = datatypeSheet.getRow(nextCell.getRowIndex()).getCell(columnIndex);
                        String bookImg = formatter.formatCellValue(isi_kolom_skrg);
                        mBuku.setBook_img_url(bookImg);
                    }
                }
                }
                total++;
                System.out.println("PROCESSING "+total+" OF "+lastRow+" DATAS");
                new C_Buku().tambah_Buku(mBuku);

            }
            
            System.out.println("IDLE");
            JOptionPane.showMessageDialog(null, "Berhasil diimport✅");
            this.dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_startImportMouseClicked

    String removeSpcialChar(String str) {
        String normalized = Normalizer.normalize(str, Normalizer.Form.NFD);
        String result = normalized.replaceAll("[^A-Za-z0-9]", " ");
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_importFile;
    private javax.swing.JButton btn_startImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel label_countData;
    private javax.swing.JLabel label_filePath;
    // End of variables declaration//GEN-END:variables
}
